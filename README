Introduction:

    This is my first project i released. Suggestions, questions
    and notices are welcome. Please report bugs as you find them.

    So why did i have created this webserver? Because of performance
    and usability aspects. This module is inspired by express. It
    is a little bit faster than express, but not a replacement for
    that greate framework. I also like the routing functions, where
    you can define custom auth types.



Installation:

    $ git clone git@github.com:zyndiecate/sayndo.git
    $ cd sayndo/
    $ npm install



    For session support the redis server is required. The redis
    client for node gets installed on "npm install", but you have
    to install the redis server by yourself on your mashine.



    Install redis-server on Ubuntu:

        $ sudo apt-get install redis-server



    More information on http://redis.io



Run server:

    // Start the server with default settings on 127.0.0.1:3000
    $ node app.js

    // Start the server with custom settings on <host>:<port>
    $ node app.js <host> <port>



Configuration:

    See lib/config.js. It´s well commented.



Routes:


    This route is called each time a user with auth type
    "guest" enters your app with a http GET request.

        var app = require('sayndo');

        app.guest.GET['/'] = function(req, res) {
            res.render('/index.html', {msg: 'hello world'});
        };



    "app" contains all routes defined in lib/config.js and the
    server "node", that is just a http server object.

    "guests" in this example, is the auth type a user can have.
    See lib/config.js and change it to your own.

    "GET" in this example, is the http request method a user
    used to enter your app. See lib/config.js and change it to
    your own.

    "['/']" in this example, is the request url.

    Each route uses this structure to call the view function if
    all components match:

    app.<auth-type>.<REQUEST-METHOD>['<request-url>']



Auth types and sessions:


    Here we create a session with the auth type "admin". In
    this case the session is set for 10 minutes. After that
    10 minutes the users auth type falls back to the default
    auth type defined in lib/config.js

        app.guest.GET['/'] = function(req, res) {
            res.createSession({authType: admin, user: 'John'}, 10);
            res.render('/index.html', {msg: 'hello world'});
        };



    If a user becomes admin with res.createSession(), he is
    able to enter routes like the following. Where "req.session.user"
    is the user name of the user you have set before, using
    res.createSession().

        app.admin.GET['/admin/dashboard'] = function(req, res) {
            res.render('/dashboard/index.html', {msg: 'Welcome ' + req.session.user});
        };



    To destroy sessions just use res.destroySession() like that.

        // Create a session and set the auth type to "user".
        app.guest.GET['/'] = function(req, res) {
            res.createSession({authType: 'user'}, 1);
            res.render('/index.html', {msg: 'you have the auth type "guest"'});
        };

        // Destroy the current session.
        app.user.GET['/'] = function(req, res) {
            res.destroySession();
            res.render('/index.html', {msg: 'you have the auth type "user"'});
        };



Cookies:

    Comming soon.



Locals:

    Locals are placeholder in views to insert data from the
    server to a view, using the following syntax.

        #{<local>}



    App locals get inserted in each view. E.g. you can do the
    following to set your app title. Yes, i know that is a
    stupid example. A better one would be the case of a
    dynamic menu for your app. But that is how it works.

        <!-- views/index.html -->
        <h1>#{title}</h1>

        // lib/app_locals.js
        var appLocals = {
            title: function(req, res) {
                return 'Sayndo';
            }
        };

        module.exports = appLocals;



    View locals get inserted in each view of a specific url.
    E.g. you can do the following to set a message to a
    specific view.

        <!-- views/index.html -->
        <h1>#{msg}</h1>

        // app.js
        app.guest.GET['/'] = function(req, res) {
            res.render('/index.html', {msg: 'hello world'});
        };



Caching:

    Static files and views get allways cached into nodes process
    memory. That kind of caching only make sence if the cache size
    dont exceed 50 mb. The given path´s of cacheable folder are
    set in lib/config.js.

    At the moment there is no other cache solution supported. If
    it is needed we will find a solution to handle cache sizes
    that exceed 50 mb with redis or something like that. Just send
    me a message.



Tests:

    >.< Oh i know they are fucking important. Comming soon as
    possible. Sorry for not supporting tests at the moment.



Benchmarks:

    mashine:            Pentium(R) Dual-Core CPU T4400 @ 2.20GHz
    duration:           30 seconds
    concurrency:        1000 req/s
    command:            siege -c1000 -t30S http://localhost:3000



    results                     express            |            sayndo
    _______________________________________________|___________________________
                                                   |
                        277 bytes    1034 bytes    |    229 bytes    1546 bytes
                                                   |
    total requests         7083          4411      |      44424         31674
    transfered mb          1.87          4.39      |       9.70         46.70
    latency (sec)          2.27          5.42      |       0.14          0.40
    req/sec              240.92        148.27      |    1522.93       1071.52
    mb/sec                 0.06          0.15      |       0.33          1.58
    concurrency             546           804      |        207           423
    longest request       22.05          9.32      |       9.13          9.54



Questions and notices:

    Send me a message on github.

